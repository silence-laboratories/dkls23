searchState.loadedDescShard("sl_mpc_mate", 0, "Session ID\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFunction to generate a random session id which is a 32 …\nGenerate a random byte array\nErrors while performing keygen\nCustom prefix\nHardened child index is not supported\nInvalid chain code\nInvalid child key, it cannot be greater than the group …\n4-byte Key fingerprint\nBIP32 version bytes\nInvalid public key, it cannot be the point at infinity\n‘tpub’ prefix\n‘xpub’ prefix\nExtended public key\n‘ypub’ prefix\n‘zpub’ prefix\nGet the prefix as a 4-byte array\nRoot chain code\nChild number\nDepth\nDerive a child public key from a parent public key and a …\nDerive the extended public key for a given derivation path …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a key ID from a root public key and root chain …\nGet the fingerprint of the root public key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParent fingerprint\nPrefix (version) as a 4-byte integer\nPublic key\nSerialize to string\nThe type of value produced by the sink when an error …\nFuture for the <code>feed</code> method.\nValues yielded by the stream.\nA <code>Sink</code> is a value into which other values can be sent, …\nAn extension trait for <code>Sink</code>s that provides a variety of …\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the stream in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAdds a fixed-size buffer to the current sink.\nAn adaptor for creating a buffered list of pending futures …\nReturn all buffered messages\nAn adaptor for creating a buffered list of pending futures.\nReturn all buffered messages and allow change\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nAn adaptor for chunking up items of the stream inside a …\nClose the sink.\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nCreates a stream which gives the current iteration count …\nFanout items to multiple sinks.\nA future that completes after the given item has been …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nFlush the sink, processing all pending items.\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuse a stream such that <code>poll_next</code> will never again be …\nDo something with each item of this stream, afterwards …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this stream into a future of …\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nWrap this stream in an <code>Either</code> stream, making it the …\nMaps this stream’s items to a different type, returning …\nConstruct a BufferedMsgRelay by wrapping up a Relay object\nCreates a future that resolves to the next item in the …\nCreates a new stream which exposes a <code>peek</code> method.\nFlush any remaining output and close this sink, if …\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nFlush any remaining output from this sink.\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempt to pull out the next value of this stream, …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nAn adaptor for chunking up ready items of the stream …\nFunction to receive message based on certain ID\nWrap this stream in an <code>Either</code> stream, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nReturns a <code>Future</code> that resolves when the next item in this …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nReturns the bounds on the remaining length of the stream.\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nCreates a new stream of at most <code>n</code> items of the underlying …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nComputes from this stream’s items new items of a …\nConverts a stream of pairs into a future, which resolves …\nWait for particular messages based on predicate.\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nAn adapter for zipping two streams together.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA polynomial with coefficients of type <code>ProjectivePoint</code>.\nA polynomial with coefficients of type <code>Scalar</code>.\nAdd another polynomial’s coefficients element wise to …\nGet the birkhoff coefficients\nCommit to this polynomial by multiplying each coefficient …\nComputes the n_i derivative of a polynomial with …\nGet the coeffs of the polynomial derivative\nEvaluate the polynomial at the given point. Arithmetic is …\nComputes the factorial of a number, n &lt;= 57 (the largest …\nComputes the factorial of a range of numbers (start, end], …\nFeldman verification\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvaluate the polynomial at 0 (the constant term).\nEvaluate the polynomial at 0 (the constant term).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new polynomial with the given coefficients.\nCreate a new polynomial with the given coefficients.\nGet the multipliers for the coefficients of the polynomial,\nCreate a new polynomial with random coefficients.\nSet constant to Scalar::ZERO\nSet constant\nCalculates the modular inverse of a matrix, generic over …\nAllocate message and initalize it from given parts.\nReturn as slice of bytes\nCreate message ID for a broadcast message, without a …\nEncode header parts into given buffer.\nDecode flags field.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode message id field.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate message ID for given instance id, sender, receiver …\nDefine a family of tags indexed by some parameter.\nDefine a familty of tags indexed by pair of parameters.\nConvert the tag to an array of bytes.\nDecode TTL field.")