searchState.loadedDescShard("derivation_path", 0, "A simple struct for dealing with derivation paths as …\nAn index in a DerivationPath\nErrors when building a ChildIndex\nErrors when parsing a ChildIndex from a str\nA list of ChildIndex items\nErrors when building a DerivationPath\nErrors when parsing a DerivationPath from a str\nDerivationPath specifications as defined by BIP’s\nBuild a BIP32 style DerivationPath. This will fail if the …\nBuild a BIP44 style DerivationPath: …\nBuild a BIP49 style DerivationPath: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a ChildIndex from a u32 representing the type and a …\nCreate a ChildIndex::Hardened instance from a u32. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the ChildIndex is “hardened”\nCheck if the ChildIndex is “normal”\nBuild a DerivationPath from a list of ChildIndex items\nCreate a ChildIndex::Normal instance from a u32. This will …\nGet a reference to the list of ChildIndex items\nGet the DerivationPathType. This will check the “purpose…\nConvert ChildIndex to a u32 representing the type and a 31 …\nConvert ChildIndex to its inner u32")