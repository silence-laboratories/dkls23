searchState.loadedDescShard("sl_dkls23", 0, "A rust  threshold ECDSA signatures library implementing …\nSeed for our RNG.\nVersion of domain labels\nReturn as slice of bytes\nCreate message ID for a broadcast message, without a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExports a threshold key to a singleton one by …\nImports a singleton external key and secret shares it …\nDKLs23 keygen. This module implements a distributed key …\nCreate message ID for given instance id, sender, receiver …\nMisc helper functions.\nSetup messages. Each mpc protocol: Keygen, Sign, Quorum …\nDKLs23 sign. Distributed Signature Generation (DSG) …\nSome party decided to not participate in the protocol.\nTag of an enrypted keyshare message\nDistributed key generation errors\nMissing message\nWe can’t a send message\nHelper method to combine the secret shares into the …\nDecrypt share encrypted by <code>export_keyshare()</code>\nExport keyshare.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerate message receiver map.\nReceive exported key shares, combine them and calculate …\nCreate ecdsa keyshares from a singleton private key.\nThis module defines all the constants used throughout the …\nThis module implements the distributed key generation …\nProtocol for refreshing existing keyshares without …\nThis module provides functionality for managing key shares …\nGenerates a map of message receivers for the DKG protocol.\nThis module provides functionality for migrating existing …\nModule for implementing the Quorum Change Protocol. The …\nThis module defines the error types and common types used …\nMisc reusable code This module provides utility functions …\nLabel used for the first commitment in the protocol. This …\nLabel used for the second commitment in the protocol. This …\nLabel used for the key generation protocol. This label is …\nFirst available message tag for user applications.\nMessage tag for the first round of oblivious transfer in …\nMessage tag for the first round of the DKG protocol. This …\nMessage tag for the second round of the DKG protocol. This …\nMessage tag for the third round of the DKG protocol. This …\nMessage tag for the fourth round of the DKG protocol. This …\nMessage tag used to communicate the final result of a …\nLabel used for the first discrete logarithm proof. This …\nLabel used for the second discrete logarithm proof. This …\nLabel used to create a discrete logarithm session ID from …\nLabel used for the first commitment in the quorum change …\nLabel used for the second commitment in the quorum change …\nLabel used for the quorum change protocol. This label is …\nMessage tag for the first oblivious transfer message in …\nMessage tag for the second oblivious transfer message in …\nMessage tag for the first peer-to-peer message in the …\nMessage tag for the second peer-to-peer message in the …\nMessage tag for the initial round of the quorum change …\nMessage tag for the first round of the quorum change …\nMessage tag for the second round of the quorum change …\nSeed type for the ChaCha20 random number generator\nExecutes the Distributed Key Generation protocol\nKeyshare for refresh of a party.\nReturns the argument unchanged.\nDeserialize KeyshareForRefresh from bytes\nCreate KeyshareForRefresh struct from Keyshare\nCreate KeyshareForRefresh struct for the participant who …\nCalls <code>U::from(self)</code>.\nlist of participants ids who lost their key_shares, should …\nCreate new KeyshareForRefresh object.\nPart ID from key share\nPublic key of the generated key.\nRank of each party\nExecute Key Refresh protocol.\nset s_i to None if party_i lost their key_share\nThreshold value\nSerialize KeyshareForRefresh to bytes Used to send …\nset s_i to None if party_i lost their key_share\nA key share representing a party’s portion of a …\nMagic number identifying valid key share data.\nReturns the underlying byte slice of the key share.\nReturns the public key component for a specific party.\nDerives a child public key with the given chain path.\nDerives a child key with the given chain path and offset.\nDerives an extended public key with the given prefix and …\nReturns the user-defined data embedded in the key share.\nReturns the argument unchanged.\nCreates a key share from a byte slice.\nCreates a key share from a vector of bytes.\nReturns the key fingerprint.\nReturns the rank of a specific party.\nCalls <code>U::from(self)</code>.\nCreates a new key share with the specified parameters.\nReturns the public key as a <code>ProjectivePoint</code>.\nReturns a vector of ranks for all parties.\nReturns the root chain code.\nReturns the root public key.\nReturns the secret scalar s_i for this party.\nReturns a vector of x-coordinates for all parties.\nReturns true if all parties have rank zero.\nMigrates key shares from other ECDSA threshold protocols …\nProcesses message receivers for the quorum change protocol.\nExecutes the Quorum Change Protocol.\nA party has decided to abort the protocol\nThe Big F vector does not match the expected value\nThe Big S value does not match the expected value\nThe Feldman verification failed\nThe commitment hash provided does not match the expected …\nThe discrete logarithm proof provided is invalid\nThe key refresh operation failed\nError while serializing or deserializing message data, or …\nThe polynomial point provided is invalid\nThe quorum change operation failed\nError type for distributed key generation protocol …\nA required message is missing\nThe x_i values provided are not unique\nAn error occurred in the PPRF (Pseudorandom Function) …\nThe public key in the message does not match the party’s …\nFailed to send a message\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper for a message of type T with support for …\nRepresents an encryption scheme interface for in-place …\nA type with fixed size of external representation.\nSize of the message header in bytes.\nExternal representation of a point on a curve\nSize of an external representation of Self\nExternal Scalar representation\nDefault encryption scheme using X25519 key exchange and …\nA wrapper for a message of type T with support for …\nA type with some external represention.\nBuilds and signs a message using a closure to set the …\nReturns passed error if msg is a vaild abort message.\nCreate an Abort Message.\nDecode a value from <code>input</code> buffer using <code>size</code> bytes. Return …\nEncode AffinePoint\nDecode a NonZeroScalar\nDecode ProjectivePoint\nDecode a scalar\nDecrypts the provided data buffer using associated data …\nDecrypts a message and returns references to the payload …\nDecrypts a message and returns references to the payload, …\nEncode header parts into given buffer.\nEncode a value into passed buffer and return remaining …\nEncode AffinePoint\nEncode ProjectivePoint\nEncode a scalar\nEncrypts the provided data buffer using associated data and\nEncrypts the message using the provided encryption scheme.\nSize of external representation in bytes\nDecode flags field.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an encrypted message from an existing buffer.\nCreates a signed message from an existing buffer.\nDecode message id field.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new encrypted message with the specified …\nCreates a new signed message with the specified parameters.\nCreates a new encrypted message with additional data.\nReturn size of trailing segment. See method <code>encrypt()</code> and …\nReturns mutable references to the message payload and …\nReturns mutable references to the message payload and …\nReturns mutable references to the message payload, …\nReturn external representation of own public key\nDeserialize value from given buffer\nSets or updates the public key for a specified receiver …\nSigns the message and returns the underlying byte vector.\nCalculates the total size of an encrypted message.\nCalculates the total size of a signed message.\nDefine a family of tags indexed by some parameter.\nDefine a familty of tags indexed by pair of parameters.\ntags Module for handling message tags and message relay …\nConvert the tag to an array of bytes.\nDecode TTL field.\nVerifies a signed message and returns a reference to the …\nVerifies a message in the buffer and returns the range …\nVerifies a signed message and returns references to the …\nSerialize a value into passed buffer\nProtocol was aborted by a participant\nErrors that can occur during message relay operations.\nA message relay that filters messages based on expected …\nReceived message was invalid\nError receiving a message\nA structure for receiving a round of messages.\nError sending a message\nAdds expected messages and asks the underlying relay to …\nAsks for messages with a given tag from a set of parties.\nSimilar to <code>ask_messages_from_iter</code> but accepts a slice of …\nBroadcasts four different types of messages to all …\nMarks a message with the given ID as expected and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying relay object.\nCreates a new <code>FilteredMsgRelay</code> by wrapping an existing …\nCreates a new round with a given number of messages to …\nReceives all encrypted messages in the round, decrypts …\nReceives all messages in the round, verifies them, decodes …\nReturns a message back to the expected messages queue.\nReceives an expected message with the given tag and …\nReceives the next message in the round.\nReceives four different types of broadcast messages from …\nCreates a new round for receiving messages.\nTag of a broadcast message indicating that sender won’t …\nAn iterator for parties in range 0..total except me.\nA wrapper around an <code>Arc&lt;T&gt;</code> that implements <code>Signer</code> for the …\nA setup message for sign::finish()\nA setup message for a reciever of exported key.\nA setup message for key export.\nA setup message for keygen::run()\nType of a signature, added at end of all broadcast messages\nType to sign broadcast messages, some kind of SecretKey.\nType to verify signed message, a verifying key. AsRef&lt;u8&gt; …\nA zero-sized type representing an empty signature. This …\nA zero-sized type representing a signing key that produces …\nA verifying key that always succeeds verification. This …\nA setup message for sign::pre_signature()\nType that provides a protocol participant details.\nA setup message for quorum_change::run()\nByte representation of a signature.\nTag for all setup messages\nA setup message for sign::run()\nSupport for decoding/encoding signatures as bytes.\nSign the provided message bytestring using <code>Self</code> (e.g. a …\nVerify the provided message bytestring using <code>Self</code> (e.g. a …\nReturn iterator of all participant’s indexes except own …\nReturns a reference to the inner byte vector.\nKey chain path for this signature\nDerive key_id from a public_key.\nDerive key_id from a public_key.\nGet the length of this signature when encoded.\nExpected public key.\nSetup for Finish PreSignature\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>NoVerifyingKey</code> from any type that can be …\nEach execution of a distributed protocol requires a unique …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSetup for Key export\nSetup for DKG\nA shared reference to a Keyshare.\nA shared reference to a Keyshare.\nA shared reference to a Keyshare.\nAdditional data to amend into the Keyshare.\nAdditional data to incorpatate into resulting Keyshare.\nHash of a message to sign.\nHash of a message to sign.\nReturn message Time To Live.\nGenerate ID of a message from this party to some other (or …\nGenerate ID of a message from given sender to a given …\nCreates a new <code>NoVerifyingKey</code> from a participant ID.\nNew participant rank. Panics is <code>party_id</code> is out of range.\nreturn new_party_id by party_index\nList of indices of new parties in a list of protocol …\nNew threshold parameter.\nA shared reference to a Keyshare.\nlist of old party indices\nReturn an index of the participant in a protocol. This is …\nReturn a rank of a participant with given index. May panic …\nReturn reference to participant’s own verifier\nPre-signature created by sign::pre_signature()\nAdditional data to incorpatate into resulting PreSignature.\nSetup for Quorum Change\nPrivate key to decrypt P2P messages.\nPublic key of a receiver party.\nSetup for DSG\nSign the given message and return a digital signature\nSigns a message using the inner signer.\nA signer to sign messages from the participant.\nThreshold parameter.\nEncode signature as its byte representation.\nReturn total number of participants of a distributed …\nAttempts to create a <code>NoSignature</code> from a byte slice.\nConverts a <code>NoSignature</code> into an empty byte array.\nAttempt to sign the given message, returning a digital …\nAttempts to sign a message, always returning <code>NoSignature</code>.\nAttempts to sign a message using the inner signer.\nReturn a verifying key for a messages from a participant …\nUse <code>Self</code> to verify that the provided signature for a given …\nVerifies a signature, always succeeding.\nReturns the verifying key associated with the inner …\nA message used for finalizing signing operations in a …\nReturns the argument unchanged.\nReturns the instance identifier for the protocol.\nCalls <code>U::from(self)</code>.\nReturns the hash of the message to be signed.\nReturns the time-to-live duration for messages.\nCreates a new setup message for finalizing signing …\nReturns the index of the current participant.\nReturns a reference to the pre-signature.\nReturns the signing key for the current participant.\nReturns the total number of participants in the protocol.\nSets a custom time-to-live duration for messages.\nReturns the verifying key for a specific participant.\nSets the hash of the message to be signed.\nModule containing the setup message for the key exporter. …\nModule containing the setup message for the key export …\nA message used for setting up key export operations in a …\nReturns the argument unchanged.\nReturns the instance identifier for the protocol.\nCalls <code>U::from(self)</code>.\nReturns a reference to the keyshare to be exported.\nReturns a reference to the keyshare to be exported.\nReturns the time-to-live duration for messages.\nCreates a new setup message for key export operations.\nReturns the index of the current participant.\nReturns the public key of the receiver.\nReturns the signing key for the current participant.\nReturns the total number of participants in the protocol.\nReturns the verifying key for a specific participant.\nSets a custom time-to-live duration for messages.\nA message used for setting up key export receiving …\nReturns the argument unchanged.\nReturns the instance identifier for the protocol.\nCalls <code>U::from(self)</code>.\nReturns a reference to the keyshare to be received.\nReturns the time-to-live duration for messages.\nCreates a new setup message for key export receiving …\nReturns the index of the current participant.\nReturns the private key used for decryption.\nReturns the signing key for the current participant.\nReturns the total number of participants in the protocol.\nReturns the verifying key for a specific participant.\nSets a custom time-to-live duration for messages.\nA message used for setting up key generation in a …\nDerives a key identifier from a public key.\nReturns the argument unchanged.\nReturns the instance identifier for the protocol.\nCalls <code>U::from(self)</code>.\nReturns the key identifier if it exists.\nReturns the time-to-live duration for messages.\nCreates a new setup message for key generation.\nReturns the index of the current participant.\nReturns the rank of a specific participant.\nReturns the signing key for the current participant.\nReturns the threshold value for the protocol.\nReturns the total number of participants in the protocol.\nReturns the verifying key for a specific participant.\nSets a custom key identifier.\nSets a custom time-to-live duration for messages.\nA message used for setting up quorum changes in a …\nDerives a key identifier from a public key.\nReturns the expected public key for the protocol.\nReturns the argument unchanged.\nReturns the instance identifier for the protocol.\nCalls <code>U::from(self)</code>.\nReturns the time-to-live duration for messages.\nCreates a new setup message for quorum changes.\nReturns the rank of a specific participant in the new …\nReturns the indices of the new participants.\nReturns the new threshold value for the protocol.\nReturns a reference to the old keyshare if it exists.\nReturns the indices of the old participants.\nReturns the index of the current participant.\nReturns the signing key for the current participant.\nReturns the total number of participants in the protocol.\nReturns the verifying key for a specific participant.\nSets a keyshare for the protocol.\nSets an optional keyshare for the protocol.\nSets a custom time-to-live duration for messages.\nA message used for setting up signing operations in a …\nReturns the derivation path for key derivation.\nReturns a clone of the keyshare.\nReturns the argument unchanged.\nReturns a reference to the derivation path.\nReturns the instance identifier for the protocol.\nCalls <code>U::from(self)</code>.\nReturns a reference to the keyshare.\nReturns the hash of the message to be signed.\nReturns the time-to-live duration for messages.\nCreates a new setup message for signing operations.\nReturns the index of the current participant.\nReturns the signing key for the current participant.\nReturns the total number of participants in the protocol.\nReturns the verifying key for a specific participant.\nSets a custom derivation path for key derivation.\nSets the hash of the message to be signed.\nOptionally sets the hash of the message to be signed.\nSets a custom time-to-live duration for messages.\nIndicates that a party has decided to abort the protocol\nIndicates that a party should be banned and the protocol …\nVariants of the Distributed Signature Generation protocol\nIndicates that a protocol check has failed\nExecute only the Finish phase\nExecute both PreSign and Finish phases\nIndicates that a cryptographic commitment is invalid\nIndicates that a message digest is invalid\nIndicates that the final session ID is invalid\nIndicates that a message has an invalid format\nIndicates that a pre-signature is invalid\nIndicates an error from the k256 elliptic curve library\nMaximum supported value for the recovery ID (inclusive).\nIndicates that a required message is missing\nResult of the pre-signature phase for a party\nExecute only the PreSign phase\nRecovery IDs, a.k.a. “recid”.\nIndicates that a message could not be sent\nError types that can occur during the Distributed …\nECDSA/secp256k1 signature (fixed-size)\nECDSA/secp256k1 verification key (i.e. public key)\nFinal session identifier\nExecutes the finish phase of the DSG protocol\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>u8</code> into a <code>RecoveryId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDid the affine x-coordinate of 𝑘×𝑮 overflow the …\nIs the affine y-coordinate of 𝑘×𝑮 odd?\nGenerates a map of message receivers for the DSG protocol\nCreate a new <code>RecoveryId</code> from the following 1-bit arguments:\nExecutes the pre-signature phase of the DSG protocol\nMain entry point for the DSG protocol\nConvert this <code>RecoveryId</code> into a <code>u8</code>.\nGiven a public key, message digest, and signature, use …\nGiven a public key, message, and signature, use trial …\nGiven a public key, message digest, and signature, use …")